{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useEffect } from \"react\";\nimport { FormGroup, Input, Button, Table, Spinner, Label, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport CsvDownload from 'react-json-to-csv';\nimport ReactPaginate from 'react-paginate';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function Content() {\n  var _useState = useState(''),\n      list = _useState[0],\n      setlist = _useState[1];\n\n  var _useState2 = useState(''),\n      data = _useState2[0],\n      setdata = _useState2[1];\n\n  var _useState3 = useState({\n    query: \"\"\n  }),\n      bodyVal = _useState3[0],\n      setBodyVal = _useState3[1];\n\n  var _useState4 = useState(false),\n      band = _useState4[0],\n      setBand = _useState4[1];\n\n  var URL = \" \";\n\n  function Items(_ref) {\n    var currentItems = _ref.currentItems;\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: currentItems && /*#__PURE__*/_jsxs(Table, {\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [\" \", /*#__PURE__*/_jsx(\"th\", {\n              children: \"Usuario\"\n            }), \" \", /*#__PURE__*/_jsx(\"th\", {\n              children: \"Tweet\"\n            }), \" \"]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: currentItems.map(function (element, index) {\n            return /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                children: element.user\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: element.tweet\n              })]\n            }, index);\n          })\n        })]\n      })\n    });\n  }\n\n  function PaginatedItems(_ref2) {\n    var itemsPerPage = _ref2.itemsPerPage;\n\n    // We start with an empty list of items.\n    var _useState5 = useState(null),\n        currentItems = _useState5[0],\n        setCurrentItems = _useState5[1];\n\n    var _useState6 = useState(0),\n        pageCount = _useState6[0],\n        setPageCount = _useState6[1]; // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n\n\n    var _useState7 = useState(0),\n        itemOffset = _useState7[0],\n        setItemOffset = _useState7[1];\n\n    useEffect(function () {\n      // Fetch items from another resources.\n      var endOffset = itemOffset + itemsPerPage;\n      console.log(\"Loading items from \".concat(itemOffset, \" to \").concat(endOffset));\n      setCurrentItems(list.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(list.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n    var handlePageClick = function handlePageClick(event) {\n      var newOffset = event.selected * itemsPerPage % list.length;\n      console.log(\"User requested page number \".concat(event.selected, \", which is offset \").concat(newOffset));\n      setItemOffset(newOffset);\n    };\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Items, {\n        currentItems: currentItems\n      }), /*#__PURE__*/_jsx(ReactPaginate, {\n        breakLabel: \"...\",\n        nextLabel: \"next >\",\n        onPageChange: handlePageClick,\n        pageRangeDisplayed: 5,\n        pageCount: pageCount,\n        previousLabel: \"< previous\",\n        renderOnZeroPageCount: null,\n        breakClassName: 'page-item',\n        breakLinkClassName: 'page-link',\n        containerClassName: 'pagination',\n        pageClassName: 'page-item',\n        pageLinkClassName: 'page-link',\n        previousClassName: 'page-item',\n        previousLinkClassName: 'page-link',\n        nextClassName: 'page-item',\n        nextLinkClassName: 'page-link',\n        activeClassName: 'active'\n      })]\n    });\n  }\n\n  function change(inp) {\n    setdata(inp);\n    var aux = {\n      query: inp\n    };\n    setBodyVal(aux);\n  }\n\n  function buildList(val) {\n    var auxVal = val.data;\n    var auxUser = val.includes.users;\n    var ret = [];\n\n    if (auxVal != undefined) {\n      auxVal.map(function (v, index) {\n        var par = {\n          user: '',\n          tweet: ''\n        };\n        par.tweet = v.text;\n        auxUser.map(function (u) {\n          if (v.author_id == u.id) {\n            par.user = u.name;\n          }\n        });\n        ret.push(par);\n      });\n      setlist(ret);\n    }\n  }\n\n  function fetchCall() {\n    return _fetchCall.apply(this, arguments);\n  }\n\n  function _fetchCall() {\n    _fetchCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setBand(true);\n              URL = \"http://localhost:9000/basicFetch?\";\n              URL = URL + \"query=\".concat(bodyVal.query);\n              _context.next = 5;\n              return fetch(URL, {\n                method: 'post'\n              }).then(function (res) {\n                return res.json();\n              }).then(function (res) {\n                return buildList(res);\n              })[\"catch\"](function (e) {\n                return console.log(e);\n              });\n\n            case 5:\n              setBand(false);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchCall.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: \"Consulta Basica\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: \"Consulta basica asociada a la palabra o el conjunto de palabras sugerido en la busqueda.\"\n      }), /*#__PURE__*/_jsx(\"form\", {\n        children: /*#__PURE__*/_jsxs(FormGroup, {\n          children: [/*#__PURE__*/_jsxs(Label, {\n            className: \"mt-2\",\n            children: [\" \", /*#__PURE__*/_jsx(\"h5\", {\n              children: \" Valores de Consuta \"\n            }), \" \"]\n          }), /*#__PURE__*/_jsx(Input, {\n            value: data,\n            onChange: function onChange(e) {\n              change(e.target.value);\n            },\n            children: \" \"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxs(\"header\", {\n          className: \"App-header\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"buttons\",\n              children: [/*#__PURE__*/_jsx(Button, {\n                disabled: band,\n                onClick: function onClick() {\n                  fetchCall();\n                },\n                children: \"Buscar\"\n              }), list && /*#__PURE__*/_jsx(CsvDownload, {\n                data: list,\n                className: \"migButton\",\n                children: \" Migrar\"\n              })]\n            })\n          }), list ? /*#__PURE__*/_jsx(_Fragment, {\n            children: /*#__PURE__*/_jsx(PaginatedItems, {\n              itemsPerPage: 10,\n              className: \"center\"\n            })\n          }) : /*#__PURE__*/_jsx(_Fragment, {\n            children: band ? /*#__PURE__*/_jsx(Spinner, {\n              children: \"Loading...\"\n            }) : /*#__PURE__*/_jsx(_Fragment, {})\n          })]\n        })\n      })]\n    })\n  });\n}\n;","map":null,"metadata":{},"sourceType":"module"}